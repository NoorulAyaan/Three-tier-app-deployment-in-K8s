name: Three-Tier App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      # Frontend Build
      - name: Set up Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          working-directory: './frontend'

      - name: Install frontend dependencies
        run: npm install
        working-directory: './frontend'

      - name: Run frontend tests
        run: npm test
        working-directory: './frontend'

      - name: Build frontend
        run: npm run build
        working-directory: './frontend'

      # Backend Build (adjust based on your backend language)
      - name: Set up backend
        run: |
          cd backend
          # Add your backend setup commands here
          # For Node.js backend, similar to frontend setup
          # For other languages, add appropriate setup

      # Docker Build and Push (if using container registry)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: your-dockerhub-username/three-tier-frontend:latest

      - name: Build and push backend image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: your-dockerhub-username/three-tier-backend:latest

      # Kubernetes Deployment
      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main'
        run: |
          kubectl apply -f k8s/
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}